chat

# Terraform initialization
provider "aws" {
  region = "us-east-1"
  assume_role {
    role_arn = "arn:aws:iam::488665884770:role/LabRole"
  }
}

resource "aws_vpc" "techno_fachri" {
  cidr_block           = "25.1.0.0/16"
  assign_generated_ipv6_cidr_block = true
  tags = {
    Name = "techno-fachri"
  }
}

resource "aws_subnet" "techno_public_subnet_a" {
  vpc_id            = aws_vpc.techno_fachri.id
  cidr_block        = "25.1.0.0/24"
  availability_zone = "us-east-1a"
  ipv6_cidr_block   = cidrsubnet(aws_vpc.techno_fachri.ipv6_cidr_block, 8, 0)
  map_public_ip_on_launch = true
  tags = {
    Name = "techno-public-subnet-a"
  }
}

resource "aws_subnet" "techno_public_subnet_b" {
  vpc_id            = aws_vpc.techno_fachri.id
  cidr_block        = "25.1.2.0/24"
  availability_zone = "us-east-1b"
  ipv6_cidr_block   = cidrsubnet(aws_vpc.techno_fachri.ipv6_cidr_block, 8, 1)
  map_public_ip_on_launch = true
  tags = {
    Name = "techno-public-subnet-b"
  }
}

resource "aws_subnet" "techno_private_subnet_a" {
  vpc_id            = aws_vpc.techno_fachri.id
  cidr_block        = "25.1.1.0/24"
  availability_zone = "us-east-1a"
  tags = {
    Name = "techno-private-subnet-a"
  }
}

resource "aws_subnet" "techno_private_subnet_b" {
  vpc_id            = aws_vpc.techno_fachri.id
  cidr_block        = "25.1.3.0/24"
  availability_zone = "us-east-1b"
  tags = {
    Name = "techno-private-subnet-b"
  }
}

resource "aws_route_table" "techno_public_rt" {
  vpc_id = aws_vpc.techno_fachri.id
  tags = {
    Name = "techno-public-rt"
  }
}

resource "aws_route_table" "techno_private_rt" {
  vpc_id = aws_vpc.techno_fachri.id
  tags = {
    Name = "techno-private-rt"
  }
}

resource "aws_internet_gateway" "techno_igw" {
  vpc_id = aws_vpc.techno_fachri.id
}

resource "aws_nat_gateway" "techno_nat" {
  allocation_id = aws_eip.techno_nat.id
  subnet_id     = aws_subnet.techno_public_subnet_a.id
  tags = {
    Name = "techno-nat-gateway"
  }
}

resource "aws_eip" "techno_nat" {
  vpc = true
}

resource "aws_security_group" "techno_sg_alb" {
  name        = "techno-sg-alb"
  description = "Allow HTTP and HTTPS"
  vpc_id      = aws_vpc.techno_fachri.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_security_group" "techno_sg_apps" {
  name        = "techno-sg-apps"
  description = "Allow access to port 2000"
  vpc_id      = aws_vpc.techno_fachri.id

  ingress {
    from_port   = 2000
    to_port     = 2000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_s3_bucket" "input" {
  bucket = "technoinput-malang-fachri"
  acl    = "public-read"
}

resource "aws_s3_bucket" "output" {
  bucket = "technooutput-malang-fachri"
  acl    = "public-read"
}

resource "aws_dynamodb_table" "tokens" {
  name         = "Tokens"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "token"

  attribute {
    name = "token"
    type = "S"
  }
}

resource "aws_kinesis_stream" "input_stream" {
  name             = "technoinput-kinesis-fachri"
  shard_count      = 1
  retention_period = 24
  stream_mode_details {
    stream_mode = "PROVISIONED"
  }
}

resource "aws_glue_catalog_database" "rekognition_db" {
  name = "rekognition_results_db"
}

resource "aws_glue_catalog_table" "rekognition_table" {
  name          = "rekognition_results_table"
  database_name = aws_glue_catalog_database.rekognition_db.name
  table_type    = "EXTERNAL_TABLE"
  parameters = {
    "classification" = "json"
  }
  storage_descriptor {
    location      = "s3://technooutput-malang-fachri/results"
    input_format  = "org.apache.hadoop.mapred.TextInputFormat"
    output_format = "org.apache.hadoop.hive.ql.io.HiveIgnoreKeyTextOutputFormat"
    serde_info {
      serialization_library = "org.openx.data.jsonserde.JsonSerDe"
    }
  }
}

resource "aws_glue_crawler" "techno_crawler" {
  name         = "techno-crawler-fachri"
  role         = "arn:aws:iam::488665884770:role/LabRole"
  database_name = aws_glue_catalog_database.rekognition_db.name
  s3_target {
    path = "s3://technooutput-malang-fachri/results"
  }
}

resource "aws_sns_topic" "techno_sns" {
  name = "techno-sns-malang-fahri"
}

resource "aws_sns_topic_subscription" "email_sub" {
  topic_arn = aws_sns_topic.techno_sns.arn
  protocol  = "email"
  endpoint  = "handi@seamolec.org"
}

resource "aws_api_gateway_rest_api" "token_api" {
  name = "TokenService"
  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

resource "aws_api_gateway_resource" "generate_token" {
  rest_api_id = aws_api_gateway_rest_api.token_api.id
  parent_id   = aws_api_gateway_rest_api.token_api.root_resource_id
  path_part   = "generate-token"
}

resource "aws_api_gateway_method" "generate_token_post" {
  rest_api_id   = aws_api_gateway_rest_api.token_api.id
  resource_id   = aws_api_gateway_resource.generate_token.id
  http_method   = "POST"
  authorization = "NONE"
}

resource "aws_api_gateway_resource" "validate_token" {
  rest_api_id = aws_api_gateway_rest_api.token_api.id
  parent_id   = aws_api_gateway_rest_api.token_api.root_resource_id
  path_part   = "validate-token"
}

resource "aws_api_gateway_method" "validate_token_get" {
  rest_api_id   = aws_api_gateway_rest_api.token_api.id
  resource_id   = aws_api_gateway_resource.validate_token.id
  http_method   = "GET"
  authorization = "NONE"
}





awan
provider "aws" {
  region = "us-east-1"
  
  assume_role {
    role_arn = "arn:aws:iam::488665884770:role/LabRole"
  }
}

# 1. VPC Configuration
resource "aws_vpc" "techno_vpc" {
  cidr_block                       = "25.1.0.0/16"
  assign_generated_ipv6_cidr_block = true
  enable_dns_support               = true
  enable_dns_hostnames             = true

  tags = {
    Name = "techno-fachri"
  }
}

# 2. Public Subnets
resource "aws_subnet" "public_subnet_1" {
  vpc_id                  = aws_vpc.techno_vpc.id
  cidr_block              = "25.1.0.0/24"
  ipv6_cidr_block         = cidrsubnet(aws_vpc.techno_vpc.ipv6_cidr_block, 8, 1)
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1a"

  tags = {
    Name = "techno-public-subnet-1"
  }
}

resource "aws_subnet" "public_subnet_2" {
  vpc_id                  = aws_vpc.techno_vpc.id
  cidr_block              = "25.1.2.0/24"
  ipv6_cidr_block         = cidrsubnet(aws_vpc.techno_vpc.ipv6_cidr_block, 8, 2)
  map_public_ip_on_launch = true
  availability_zone       = "us-east-1b"

  tags = {
    Name = "techno-public-subnet-2"
  }
}

# 3. Private Subnets
resource "aws_subnet" "private_subnet_1" {
  vpc_id            = aws_vpc.techno_vpc.id
  cidr_block        = "25.1.1.0/24"
  ipv6_cidr_block   = cidrsubnet(aws_vpc.techno_vpc.ipv6_cidr_block, 8, 3)
  availability_zone = "us-east-1a"

  tags = {
    Name = "techno-private-subnet-1"
  }
}

resource "aws_subnet" "private_subnet_2" {
  vpc_id            = aws_vpc.techno_vpc.id
  cidr_block        = "25.1.3.0/24"
  ipv6_cidr_block   = cidrsubnet(aws_vpc.techno_vpc.ipv6_cidr_block, 8, 4)
  availability_zone = "us-east-1b"

  tags = {
    Name = "techno-private-subnet-2"
  }
}

# Internet Gateway
resource "aws_internet_gateway" "igw" {
  vpc_id = aws_vpc.techno_vpc.id

  tags = {
    Name = "techno-igw"
  }
}

# Elastic IP for NAT Gateway
resource "aws_eip" "nat_eip" {
  domain = "vpc"

  tags = {
    Name = "techno-nat-eip"
  }
}

# 6. NAT Gateway
resource "aws_nat_gateway" "nat_gateway" {
  allocation_id = aws_eip.nat_eip.id
  subnet_id     = aws_subnet.public_subnet_1.id

  tags = {
    Name = "techno-nat-gateway"
  }

  depends_on = [aws_internet_gateway.igw]
}

# 4. Public Route Table
resource "aws_route_table" "public_rt" {
  vpc_id = aws_vpc.techno_vpc.id

  route {
    cidr_block = "0.0.0.0/0"
    gateway_id = aws_internet_gateway.igw.id
  }

  route {
    ipv6_cidr_block = "::/0"
    gateway_id      = aws_internet_gateway.igw.id
  }

  tags = {
    Name = "techno-public-rt"
  }
}

# Public Route Table Association
resource "aws_route_table_association" "public_rta_1" {
  subnet_id      = aws_subnet.public_subnet_1.id
  route_table_id = aws_route_table.public_rt.id
}

resource "aws_route_table_association" "public_rta_2" {
  subnet_id      = aws_subnet.public_subnet_2.id
  route_table_id = aws_route_table.public_rt.id
}

# 5. Private Route Table
resource "aws_route_table" "private_rt" {
  vpc_id = aws_vpc.techno_vpc.id

  route {
    cidr_block     = "0.0.0.0/0"
    nat_gateway_id = aws_nat_gateway.nat_gateway.id
  }

  tags = {
    Name = "techno-private-rt"
  }
}

# Private Route Table Association
resource "aws_route_table_association" "private_rta_1" {
  subnet_id      = aws_subnet.private_subnet_1.id
  route_table_id = aws_route_table.private_rt.id
}

resource "aws_route_table_association" "private_rta_2" {
  subnet_id      = aws_subnet.private_subnet_2.id
  route_table_id = aws_route_table.private_rt.id
}

# 7. Security Groups
resource "aws_security_group" "alb_sg" {
  name        = "techno-sg-alb"
  description = "Allow HTTP and HTTPS traffic"
  vpc_id      = aws_vpc.techno_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "techno-sg-alb"
  }
}

resource "aws_security_group" "apps_sg" {
  name        = "techno-sg-apps"
  description = "Allow port 2000 traffic"
  vpc_id      = aws_vpc.techno_vpc.id

  ingress {
    from_port   = 2000
    to_port     = 2000
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
    ipv6_cidr_blocks = ["::/0"]
  }

  tags = {
    Name = "techno-sg-apps"
  }
}

# 8. S3 Buckets
resource "aws_s3_bucket" "input_bucket" {
  bucket = "technoinput-malang-fachri"

  tags = {
    Name = "technoinput-malang-fachri"
  }
}

resource "aws_s3_bucket" "output_bucket" {
  bucket = "technooutput-malang-fachri"

  tags = {
    Name = "technooutput-malang-fachri"
  }
}

# Output Bucket Policy for public read access
resource "aws_s3_bucket_policy" "output_bucket_policy" {
  bucket = aws_s3_bucket.output_bucket.id

  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Sid       = "PublicReadGetObject"
        Effect    = "Allow"
        Principal = "*"
        Action    = "s3:GetObject"
        Resource  = "${aws_s3_bucket.output_bucket.arn}/*"
      }
    ]
  })
}

# S3 bucket public access block settings
resource "aws_s3_bucket_public_access_block" "output_bucket_access" {
  bucket = aws_s3_bucket.output_bucket.id

  block_public_acls       = false
  block_public_policy     = false
  ignore_public_acls      = false
  restrict_public_buckets = false
}

# 9. DynamoDB Table
resource "aws_dynamodb_table" "tokens_table" {
  name         = "Tokens"
  billing_mode = "PAY_PER_REQUEST"
  hash_key     = "token"

  attribute {
    name = "token"
    type = "S"
  }

  tags = {
    Name = "Tokens"
  }
}

# 10. Kinesis Data Stream
resource "aws_kinesis_stream" "input_stream" {
  name             = "technoinput-kinesis-fachri"
  shard_count      = 1
  retention_period = 24

  shard_level_metrics = [
    "IncomingBytes",
    "OutgoingBytes",
  ]

  tags = {
    Name = "technoinput-kinesis-fachri"
  }
}

# 11. AWS Glue Database and Table
resource "aws_glue_catalog_database" "rekognition_db" {
  name = "rekognition_results_db"
}

# Glue Crawler IAM Role
resource "aws_iam_role" "glue_crawler_role" {
  name = "techno-glue-crawler-role"

  assume_role_policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Action = "sts:AssumeRole"
        Effect = "Allow"
        Principal = {
          Service = "glue.amazonaws.com"
        }
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "glue_service" {
  role       = aws_iam_role.glue_crawler_role.name
  policy_arn = "arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole"
}

resource "aws_iam_policy" "s3_glue_access" {
  name = "techno-s3-glue-access"
  
  policy = jsonencode({
    Version = "2012-10-17"
    Statement = [
      {
        Effect = "Allow"
        Action = [
          "s3:GetObject",
          "s3:ListBucket"
        ]
        Resource = [
          "${aws_s3_bucket.output_bucket.arn}",
          "${aws_s3_bucket.output_bucket.arn}/results/*"
        ]
      }
    ]
  })
}

resource "aws_iam_role_policy_attachment" "s3_glue_access_attachment" {
  role       = aws_iam_role.glue_crawler_role.name
  policy_arn = aws_iam_policy.s3_glue_access.arn
}

# Glue Crawler
resource "aws_glue_crawler" "rekognition_crawler" {
  name          = "techno-crawler-fachri"
  role          = aws_iam_role.glue_crawler_role.arn
  database_name = aws_glue_catalog_database.rekognition_db.name

  s3_target {
    path = "s3://${aws_s3_bucket.output_bucket.bucket}/results"
  }

  schedule = "cron(0 */6 * * ? *)" # Run every 6 hours
  
  schema_change_policy {
    delete_behavior = "LOG"
    update_behavior = "UPDATE_IN_DATABASE"
  }
}

# 12. SNS Topic and Subscription
resource "aws_sns_topic" "notification_topic" {
  name = "techno-sns-malang-fachri"
}

resource "aws_sns_topic_subscription" "email_subscription" {
  topic_arn = aws_sns_topic.notification_topic.arn
  protocol  = "email"
  endpoint  = "handi@seamolec.org"
}

# 13. API Gateway
resource "aws_api_gateway_rest_api" "techno_api" {
  name        = "Techno-API-fachri"
  description = "API Gateway for token management"
  
  endpoint_configuration {
    types = ["REGIONAL"]
  }
}

# /generate-token resource
resource "aws_api_gateway_resource" "generate_token" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  parent_id   = aws_api_gateway_rest_api.techno_api.root_resource_id
  path_part   = "generate-token"
}

# POST method for /generate-token
resource "aws_api_gateway_method" "generate_token_post" {
  rest_api_id   = aws_api_gateway_rest_api.techno_api.id
  resource_id   = aws_api_gateway_resource.generate_token.id
  http_method   = "POST"
  authorization_type = "NONE"
}

# /validate-token resource
resource "aws_api_gateway_resource" "validate_token" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  parent_id   = aws_api_gateway_rest_api.techno_api.root_resource_id
  path_part   = "validate-token"
}

# GET method for /validate-token
resource "aws_api_gateway_method" "validate_token_get" {
  rest_api_id   = aws_api_gateway_rest_api.techno_api.id
  resource_id   = aws_api_gateway_resource.validate_token.id
  http_method   = "GET"
  authorization_type = "NONE"
}

# Mock integration for the API methods (in a real scenario you would connect to Lambda functions)
# Mock for generate-token POST
resource "aws_api_gateway_integration" "generate_token_post_integration" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  resource_id = aws_api_gateway_resource.generate_token.id
  http_method = aws_api_gateway_method.generate_token_post.http_method
  type        = "MOCK"
  
  request_templates = {
    "application/json" = "{\"statusCode\": 200}"
  }
}

# Mock for validate-token GET
resource "aws_api_gateway_integration" "validate_token_get_integration" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  resource_id = aws_api_gateway_resource.validate_token.id
  http_method = aws_api_gateway_method.validate_token_get.http_method
  type        = "MOCK"
  
  request_templates = {
    "application/json" = "{\"statusCode\": 200}"
  }
}

# Method responses
resource "aws_api_gateway_method_response" "generate_token_post_response" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  resource_id = aws_api_gateway_resource.generate_token.id
  http_method = aws_api_gateway_method.generate_token_post.http_method
  status_code = "200"
}

resource "aws_api_gateway_method_response" "validate_token_get_response" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  resource_id = aws_api_gateway_resource.validate_token.id
  http_method = aws_api_gateway_method.validate_token_get.http_method
  status_code = "200"
}

# Integration responses
resource "aws_api_gateway_integration_response" "generate_token_post_integration_response" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  resource_id = aws_api_gateway_resource.generate_token.id
  http_method = aws_api_gateway_method.generate_token_post.http_method
  status_code = aws_api_gateway_method_response.generate_token_post_response.status_code
  
  response_templates = {
    "application/json" = "{\"message\": \"Token generated successfully\"}"
  }
}

resource "aws_api_gateway_integration_response" "validate_token_get_integration_response" {
  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  resource_id = aws_api_gateway_resource.validate_token.id
  http_method = aws_api_gateway_method.validate_token_get.http_method
  status_code = aws_api_gateway_method_response.validate_token_get_response.status_code
  
  response_templates = {
    "application/json" = "{\"message\": \"Token validated successfully\"}"
  }
}

# Deployment
resource "aws_api_gateway_deployment" "techno_api_deployment" {
  depends_on = [
    aws_api_gateway_integration.generate_token_post_integration,
    aws_api_gateway_integration.validate_token_get_integration,
    aws_api_gateway_integration_response.generate_token_post_integration_response,
    aws_api_gateway_integration_response.validate_token_get_integration_response
  ]

  rest_api_id = aws_api_gateway_rest_api.techno_api.id
  stage_name  = "prod"
}

# Outputs
output "vpc_id" {
  value = aws_vpc.techno_vpc.id
}

output "public_subnet_ids" {
  value = [aws_subnet.public_subnet_1.id, aws_subnet.public_subnet_2.id]
}

output "private_subnet_ids" {
  value = [aws_subnet.private_subnet_1.id, aws_subnet.private_subnet_2.id]
}

output "input_bucket_name" {
  value = aws_s3_bucket.input_bucket.bucket
}

output "output_bucket_name" {
  value = aws_s3_bucket.output_bucket.bucket
}

output "dynamodb_table_name" {
  value = aws_dynamodb_table.tokens_table.name
}

output "kinesis_stream_name" {
  value = aws_kinesis_stream.input_stream.name
}

output "api_gateway_invoke_url" {
  value = "${aws_api_gateway_deployment.techno_api_deployment.invoke_url}"
}

output "sns_topic_arn" {
  value = aws_sns_topic.notification_topic.arn
}
